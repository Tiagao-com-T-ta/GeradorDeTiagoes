@using GeradorDeTiagoes.WebApp.Models
@model RegisterQuestionViewModel

@{
    ViewBag.Titulo = "Cadastro de Questões";
}

<hr />
<div class="row justify-content-center my-5">
    <div class="col-md-8">
        <div class="card rounded-4 border-0">
            <div class="card-body p-md-5">
                <form asp-action="Create" id="questionForm">
                    <h3>Cadastro de Questão</h3>

                    @if (ViewData.ModelState[""]?.Errors.Count > 0)
                    {
                        <div class="alert alert-danger alert-dismissible fade show my-3" role="alert">
                            @Html.ValidationSummary()
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    <div class="form-group d-grid gap-2 mt-3">
                        <label asp-for="Statement" class="control-label fs-5">Enunciado:</label>
                        <textarea asp-for="Statement" class="form-control" rows="3"></textarea>
                        <span asp-validation-for="Statement" class="text-danger"></span>
                    </div>

                    <div class="form-group d-grid gap-2 mt-3">
                        <label class="control-label fs-5">Disciplina:</label>
                        <select id="DisciplineId" class="form-control" asp-items="Model.Disciplines">
                            <option value="">Selecione uma disciplina</option>
                        </select>
                    </div>

                    <div class="form-group d-grid gap-2 mt-3">
                        <label asp-for="SubjectId" class="control-label fs-5">Matéria:</label>
                        <select asp-for="SubjectId" class="form-control" id="SubjectId">
                            <option value="">Selecione uma matéria</option>
                        </select>
                        <span asp-validation-for="SubjectId" class="text-danger"></span>
                    </div>

                    <div class="form-group mt-4">
                        <label class="control-label fs-5">Alternativas:</label>
                        <div id="alternativesContainer">
                            @for (int i = 0; i < Model.Alternatives.Count; i++)
                            {
                                <div class="alternative-item mb-2 d-flex align-items-center gap-2">
                                    <input type="hidden" asp-for="Alternatives[i].IsCorrect" class="is-correct-input" value="false" />
                                    <input asp-for="Alternatives[i].Text" class="form-control alternative-text" placeholder="Texto da alternativa" />
                                    <button type="button" class="btn btn-outline-success correct-btn" onclick="setCorrectAlternative(this)">Correta</button>
                                    <button type="button" class="btn btn-outline-danger remove-btn" onclick="removeAlternative(this)">Remover</button>
                                </div>
                            }
                        </div>
                        <button type="button" class="btn btn-outline-primary mt-2" onclick="addAlternative()">Adicionar Alternativa</button>
                        <span id="alternativesError" class="text-danger"></span>
                    </div>

                    <div class="form-group d-flex align-items-center justify-content-end gap-3 mt-5">
                        <a href="/question">Voltar para a listagem</a>
                        <button type="submit" class="btn btn-primary rounded-3 px-5">Confirmar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        $(document).ready(function() {
            // Load subjects when discipline changes
            $('#DisciplineId').change(function() {
                var disciplineId = $(this).val();
                var subjectSelect = $('#SubjectId');

                subjectSelect.empty();
                subjectSelect.append('<option value="">Selecione uma matéria</option>');

                if (disciplineId) {
                    $.get('/question/GetSubjectsByDiscipline', { disciplineId: disciplineId }, function(data) {
                        $.each(data, function(index, item) {
                            subjectSelect.append($('<option></option>').val(item.id).text(item.name));
                        });
                    });
                }
            });

            // Trigger change event if discipline is already selected
            if ($('#DisciplineId').val()) {
                $('#DisciplineId').trigger('change');
            }
        });

        // Alternatives management
        let alternativeCount = @Model.Alternatives.Count;

        function addAlternative() {
            if (alternativeCount >= 4) {
                alert('Máximo de 4 alternativas atingido');
                return;
            }

            const container = $('#alternativesContainer');
            const newIndex = alternativeCount;

            const newAlternative = `
                <div class="alternative-item mb-2 d-flex align-items-center gap-2">
                    <input type="hidden" name="Alternatives[${newIndex}].IsCorrect" class="is-correct-input" value="false" />
                    <input name="Alternatives[${newIndex}].Text" class="form-control alternative-text" placeholder="Texto da alternativa" />
                    <button type="button" class="btn btn-outline-success correct-btn" onclick="setCorrectAlternative(this)">Correta</button>
                    <button type="button" class="btn btn-outline-danger remove-btn" onclick="removeAlternative(this)">Remover</button>
                </div>
            `;

            container.append(newAlternative);
            alternativeCount++;
        }

        function removeAlternative(button) {
            if ($('.alternative-item').length <= 2) {
                alert('Mínimo de 2 alternativas requerido');
                return;
            }

            $(button).closest('.alternative-item').remove();
            reindexAlternatives();
        }

        function setCorrectAlternative(button) {
            $('.correct-btn').removeClass('btn-success').addClass('btn-outline-success').text('Correta');
            $('.is-correct-input').val('false');

            $(button).removeClass('btn-outline-success').addClass('btn-success').text('✓ Correta');
            $(button).siblings('.is-correct-input').val('true');
        }

        function reindexAlternatives() {
            alternativeCount = 0;
            $('.alternative-item').each(function(index) {
                $(this).find('input[name$="].Text"]').attr('name', `Alternatives[${index}].Text`);
                $(this).find('input[name$="].IsCorrect"]').attr('name', `Alternatives[${index}].IsCorrect`);
                alternativeCount++;
            });
        }

        $('#questionForm').submit(function(e) {
            const correctCount = $('.is-correct-input[value="true"]').length;
            const alternativeCount = $('.alternative-item').length;

            if (alternativeCount < 2 || alternativeCount > 4) {
                $('#alternativesError').text('A questão deve ter entre 2 e 4 alternativas.');
                e.preventDefault();
                return;
            }

            if (correctCount !== 1) {
                $('#alternativesError').text('Selecione exatamente uma alternativa correta.');
                e.preventDefault();
                return;
            }

            $('#alternativesError').text('');
        });
    </script>
}